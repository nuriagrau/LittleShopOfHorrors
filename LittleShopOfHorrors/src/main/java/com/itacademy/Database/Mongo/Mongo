package com.itacademy.Database.Mongo;

import com.itacademy.Persistance.Mongo.DatabaseConnection;
import com.itacademy.Products.Product;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import org.bson.conversions.Bson;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;

import java.util.ArrayList;
import java.util.List;

public class MongoQueries {

    private static MongoDatabase database = DatabaseConnection.getDatabase();
    private static MongoCollection<Document> productCollection = database.getCollection("Product");

    // Insertar una tienda
    public static void insertFlowerShop(String name, double stockValue) {
        Document document = new Document("name", name)
                .append("stockValue", stockValue);
        database.getCollection("FlowerShop").insertOne(document);
    }

    // Insertar un producto
    public static void insertProduct(Product product) {
        Document document = new Document("productId", product.getProductId())
            .append("name", product.getName())
            .append("price", product.getPrice())
            .append("stock", product.getStock())
            .append("type", product.getClass().getSimpleName());
        productCollection.insertOne(document);
    }

    // Actualizar un producto
    public static void updateProduct(int productId, String name, double price, int stock, String type) {
        Bson filter = Filters.eq("productId", productId);
        Bson update = Updates.combine(
            Updates.set("name", name),
            Updates.set("price", price),
            Updates.set("stock", stock),
            Updates.set("type", type)
        );
        productCollection.updateOne(filter, update);
    }

    // Eliminar un producto
    public static void deleteProduct(int productId) {
        Bson filter = Filters.eq("productId", productId);
        productCollection.deleteOne(filter);
    }

    // Obtener un producto por ID
    public static Product getProductById(int productId) {
        Bson filter = Filters.eq("productId", productId);
        Document doc = productCollection.find(filter).first();

        if (doc != null) {
            return new Product(
                doc.getInteger("productId"),
                doc.getString("name"),
                doc.getDouble("price"),
                doc.getInteger("stock"),
                doc.getString("type")
            );
        }
        return null;
    }

    // Obtener todos los productos
    public static List<Product> getAllProducts() {
        List<Product> products = new ArrayList<>();
        for (Document doc : productCollection.find()) {
            products.add(new Product(
                doc.getInteger("productId"),
                doc.getString("name"),
                doc.getDouble("price"),
                doc.getInteger("stock"),
                doc.getString("type")
            ));
        }
        return products;
    }

    // Insertar un ticket
    public static void insertTicket(Ticket ticket) {
        Document document = new Document("ticketId", ticket.getId())
            .append("flowerShopId", ticket.getFlowerShopId())
            .append("timestamp", ticket.getTimestamp())
            .append("ticketValue", ticket.getTicketValue());
        database.getCollection("Ticket").insertOne(document);
    }

    // Insertar líneas de ticket
    public static void insertTicketLine(int ticketId, int productId, int quantity, double lineValue) {
        Document document = new Document("ticketId", ticketId)
            .append("productId", productId)
            .append("quantity", quantity)
            .append("lineValue", lineValue);
        database.getCollection("TicketLine").insertOne(document);
    }

    // Actualizar valor del ticket
    public static void updateTicketValue(int ticketId, double ticketValue) {
        Bson filter = Filters.eq("ticketId", ticketId);
        Bson update = Updates.set("ticketValue", ticketValue);
        database.getCollection("Ticket").updateOne(filter, update);
    }

    // Eliminar un ticket
    public static void deleteTicket(int ticketId) {
        Bson filter = Filters.eq("ticketId", ticketId);
        database.getCollection("Ticket").deleteOne(filter);
    }

    // Obtener todas las líneas de ticket
    public static List<Document> getTicketLines(int ticketId) {
        Bson filter = Filters.eq("ticketId", ticketId);
        return database.getCollection("TicketLine").find(filter).into(new ArrayList<>());
    }

    // Obtener todos los tickets
    public static List<Ticket> getAllTickets() {
        List<Ticket> tickets = new ArrayList<>();
        for (Document doc : database.getCollection("Ticket").find()) {
            tickets.add(new Ticket(
                doc.getInteger("ticketId"),
                doc.getInteger("flowerShopId"),
                doc.getDate("timestamp"),
                doc.getDouble("ticketValue")
            ));
        }
        return tickets;
    }
}
